# automatically generated by the FlatBuffers compiler, do not modify

# namespace: R3P

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class R3PImage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = R3PImage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsR3PImage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # R3PImage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # R3PImage
    def Jobid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # R3PImage
    def Iteration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # R3PImage
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # R3PImage
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # R3PImage
    def Positions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # R3PImage
    def PositionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # R3PImage
    def PositionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # R3PImage
    def PositionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # R3PImage
    def Colors(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # R3PImage
    def ColorsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # R3PImage
    def ColorsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # R3PImage
    def ColorsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def R3PImageStart(builder): builder.StartObject(6)
def Start(builder):
    return R3PImageStart(builder)
def R3PImageAddJobid(builder, jobid): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(jobid), 0)
def AddJobid(builder, jobid):
    return R3PImageAddJobid(builder, jobid)
def R3PImageAddIteration(builder, iteration): builder.PrependUint32Slot(1, iteration, 0)
def AddIteration(builder, iteration):
    return R3PImageAddIteration(builder, iteration)
def R3PImageAddWidth(builder, width): builder.PrependUint16Slot(2, width, 0)
def AddWidth(builder, width):
    return R3PImageAddWidth(builder, width)
def R3PImageAddHeight(builder, height): builder.PrependUint16Slot(3, height, 0)
def AddHeight(builder, height):
    return R3PImageAddHeight(builder, height)
def R3PImageAddPositions(builder, positions): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(positions), 0)
def AddPositions(builder, positions):
    return R3PImageAddPositions(builder, positions)
def R3PImageStartPositionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPositionsVector(builder, numElems):
    return R3PImageStartPositionsVector(builder, numElems)
def R3PImageAddColors(builder, colors): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(colors), 0)
def AddColors(builder, colors):
    return R3PImageAddColors(builder, colors)
def R3PImageStartColorsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartColorsVector(builder, numElems):
    return R3PImageStartColorsVector(builder, numElems)
def R3PImageEnd(builder): return builder.EndObject()
def End(builder):
    return R3PImageEnd(builder)